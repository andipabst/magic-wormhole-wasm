[package]
name = "magic-wormhole-wasm"
version = "0.1.0"
authors = ["andi <andipabst25@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = { version = "0.2.78" }
wasm-bindgen-futures = "0.4.28"
wasm-logger = "0.2.0"
#getrandom = { version = "0.2", features = ["js"] }
getrandom = { version = "0.1", features = ["wasm-bindgen"] }
url = "2.2.2"
clear_on_drop = { version = "0.2.4", features = ["no_cc"] }
#rand = { version = "0.8.5", features = ["wasm-bindgen"] }
#magic-wormhole = { git = "https://github.com/andipabst/magic-wormhole.rs", features = ["wasm"], rev = "654cf3a" }
magic-wormhole = { path = "../magic-wormhole.rs", features = ["wasm"], default-features = false }
web-sys = { version = "0.3.55", features = ["HtmlElement", "HtmlInputElement", "FileReader", "ProgressEvent", "FileList", "File"] }
js-sys = "0.3.57"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
